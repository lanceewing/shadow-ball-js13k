/**
 * Handles the generation, playing, and pausing of the sound effects and background music
 * for the game.
 * 
 * The approach used is based on the following codepen post by Jack Rugile:
 * 
 * http://codepen.io/jackrugile/blog/arcade-audio-for-js13k-games
 */
$.Sound = {
  
  /**
   * Stores the sounds, keyed by the sound name.
   */
  sounds: {}, 
  
  /**
   * Initialised all of the sound effects and the background music.
   */
  init: function() {
    this.add('music', 1, this.song);
    this.add('bomb', 10, [2,,0.2,0.81,0.09,0.6609,,-0.2901,-0.64,,,,,0.072,0.191,,-0.38,-0.02,1,,,0.1841,,0.5]);
    this.add('enemy', 20, [0,,0.1491,,0.387,0.7019,0.0931,-0.4802,,,,,,0.3987,0.1039,,,,1,,,0.2356,,0.5]);
    this.add('hit', 10, [3,,0.1283,0.6002,0.4009,0.06,,,,,,,,,,,-0.0393,-0.2507,1,,,,,0.5]);
    this.add('explosion', 10, [3,,0.3453,0.6998,0.2278,0.08,,-0.0553,,,,-0.2784,0.6294,,,,,,1,,,,,0.52]);
    this.add('rock', 2, [2,,0.01,0.557,0.3303,0.4434,,,,,,0.5368,0.5981,,,,,,1,,,,,0.5]);
    this.add('count', 1, [2,,0.1707,,0.0644,0.5146,,,,,,,,,,,,,1,,,0.1,,0.5]);
    this.add('jump', 1, [1,0.0211,0.0118,0.1212,0.3302,0.5455,,0.134,0.1033,-0.0597,0.4831,-0.7084,0.9199,-0.3849,0.298,,-0.248,-0.0542,0.3558,-0.0163,0.7575,,0.1156,0.29]);
    this.add('powerup', 1, [2,,0.1454,,0.3698,0.2002,,0.2469,,,,,,0.1781,,,,,1,,,,,0.5]);
    this.add('cleared', 1, [2,0.0738,0.9417,0.1338,0.1844,0.504,,-0.0519,0.1093,0.1416,0.696,0.4653,0.0134,0.2708,-0.2926,-0.1538,,-0.0891,0.997,0.0084,0.7638,0.0076,0.6493,0.5]);
    this.add('push', 1, [3,0.25,0.1706,,0.45,0.85,,0.04,0.36,,,-0.02,,,,,0.28,,1,,,0.1,,0.23]);
  },
  
  /**
   * Generates a sound using the given data and adds it to the stored sounds under the 
   * given name. It will generate the sound multiple times if count is greater than one.
   * This method handles both jsfxr sounds and SoundBox compositions.
   * 
   * @param {Object} name The name of the sound to create. This is the key in the stored sounds.
   * @param {Object} count The number of times to generate the sound.
   * @param {Object} data The data containing the parameters of the sound to be generated.
   */
  add: function(name, count, data) {
    this.sounds[name] = {tick: 0, count: count, pool: []};
    for (var i = 0; i < count; i++) {
      var audio = new Audio();
      if (data instanceof Array) {
        // If it is an Array, it must be jsfxr data.
        audio.src = jsfxr(data);
      } else {
        // Otherwise it is SoundBox data.
        var player = new CPlayer();
        player.init(data);
        // Using only 4 instruments. This saves a bit of space.
        player.generate();
        player.generate();
        player.generate();
        player.generate();
        audio.src = URL.createObjectURL(new Blob([player.createWave()], {type: "audio/wav"}));
        // This is background music, so we set it to loop and turn the volume down a bit.
        audio.loop = true;
        audio.volume = 0.35;
      }
      this.sounds[name].pool.push(audio);
    }
  },
  
  /**
   * Plays the sound of the given name. All sounds are stored as pre-generated Audio 
   * objects. So it is simply a matter of telling it to play. Some sounds have multiple
   * copies, particularly if the sound can be played in quick succession, potentially
   * overlapping. In such a case, it can't use the same Audio, so iterates over a pool
   * of Audios containing the same sound.  
   * 
   * @param {string} name The name of the sound to play.
   */
  play: function(name) {
    var sound = this.sounds[name];
    sound.pool[sound.tick].play();
    sound.tick < sound.count - 1 ? sound.tick++ : sound.tick = 0;
  },
  
  /**
   * Pauses the sound of the given name. This is only useful if the count is one, such
   * as for the background music. The current position within the Audio is also set 
   * back to the beginning so that when it is resumed, it starts at the beginning 
   * again.
   *  
   * @param {string} name The name of the sound to pause.
   */
  pause: function(name) {
    var audio = this.sounds[name].pool[0];
    audio.pause();
    audio.currentTime = 0;
  },
  
  /**
   * This is background music, composed on and generated by the SoundBox. It is an 
   * original composition composed by the author of Shadow Ball, specifically for 
   * Shadow Ball.
   */
  song: {
    songData: [
      { // Instrument 0
        i: [
        2, // OSC1_WAVEFORM
        100, // OSC1_VOL
        128, // OSC1_SEMI
        0, // OSC1_XENV
        3, // OSC2_WAVEFORM
        201, // OSC2_VOL
        128, // OSC2_SEMI
        0, // OSC2_DETUNE
        0, // OSC2_XENV
        0, // NOISE_VOL
        16, // ENV_ATTACK
        5, // ENV_SUSTAIN
        29, // ENV_RELEASE
        0, // LFO_WAVEFORM
        195, // LFO_AMT
        6, // LFO_FREQ
        1, // LFO_FX_FREQ
        2, // FX_FILTER
        135, // FX_FREQ
        0, // FX_RESONANCE
        2, // FX_DIST
        32, // FX_DRIVE
        147, // FX_PAN_AMT
        6, // FX_PAN_FREQ
        121, // FX_DELAY_AMT
        6 // FX_DELAY_TIME
        ],
        // Patterns
        p: [,,,,,,,,1,3,2,4,1,3,2,4,5,6,7,6,7,6],
        // Columns
        c: [
          {n: [,,122,,125,,129,,130,,129,,130,,129,,,,122,,125,,129,,130,,129,,130,,129],
           f: []},
          {n: [134,,122,,134,,122,,130,,122,,130,,122,,129,,122,,129,,122,,125,,122,,125,,122],
           f: []},
          {n: [,,120,,125,,129,,130,,129,,130,,129,,,,120,,125,,129,,130,,129,,130,,129],
           f: []},
          {n: [134,,120,,134,,120,,130,,120,,130,,120,,129,,120,,129,,120,,125,,120,,125,,120],
           f: []},
          {n: [125,,,,,,127,,,,,,129,,,,125,,,,,,127,,,,,,129],
           f: []},
          {n: [,,,,124,,,,,,125,,,,,,127,,,,,,125,,,,124],
           f: []},
          {n: [,,,,134,,130,,,,,,129,,,,125],
           f: []}
        ]
      },
      { // Instrument 1
        i: [
        2, // OSC1_WAVEFORM
        100, // OSC1_VOL
        128, // OSC1_SEMI
        0, // OSC1_XENV
        3, // OSC2_WAVEFORM
        201, // OSC2_VOL
        128, // OSC2_SEMI
        0, // OSC2_DETUNE
        0, // OSC2_XENV
        0, // NOISE_VOL
        0, // ENV_ATTACK
        6, // ENV_SUSTAIN
        29, // ENV_RELEASE
        0, // LFO_WAVEFORM
        195, // LFO_AMT
        4, // LFO_FREQ
        1, // LFO_FX_FREQ
        3, // FX_FILTER
        50, // FX_FREQ
        184, // FX_RESONANCE
        38, // FX_DIST
        244, // FX_DRIVE
        147, // FX_PAN_AMT
        6, // FX_PAN_FREQ
        84, // FX_DELAY_AMT
        6 // FX_DELAY_TIME
        ],
        // Patterns
        p: [1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,3,2],
        // Columns
        c: [
          {n: [110,,122,,110,,122,,110,,122,,110,,122,,110,,122,,110,,122,,110,,122,,110,,122],
           f: []},
          {n: [108,,120,,108,,120,,108,,120,,108,,120,,108,,120,,108,,120,,108,,120,,108,,120],
           f: []},
          {n: [106,,118,,106,,118,,106,,118,,106,,118,,106,,118,,106,,118,,106,,118,,106,,118],
           f: []}
        ]
      },
      { // Instrument 2
        i: [
        0, // OSC1_WAVEFORM
        255, // OSC1_VOL
        116, // OSC1_SEMI
        1, // OSC1_XENV
        0, // OSC2_WAVEFORM
        255, // OSC2_VOL
        116, // OSC2_SEMI
        0, // OSC2_DETUNE
        1, // OSC2_XENV
        14, // NOISE_VOL
        4, // ENV_ATTACK
        6, // ENV_SUSTAIN
        45, // ENV_RELEASE
        0, // LFO_WAVEFORM
        0, // LFO_AMT
        0, // LFO_FREQ
        0, // LFO_FX_FREQ
        2, // FX_FILTER
        136, // FX_FREQ
        15, // FX_RESONANCE
        0, // FX_DIST
        32, // FX_DRIVE
        0, // FX_PAN_AMT
        0, // FX_PAN_FREQ
        66, // FX_DELAY_AMT
        6 // FX_DELAY_TIME
        ],
        // Patterns
        p: [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        // Columns
        c: [
          {n: [146,,,,146,,,,146,,,,146,,,,146,,,,146,,,,146,,,,146],
           f: []}
        ]
      },
      { // Instrument 3
        i: [
        0, // OSC1_WAVEFORM
        0, // OSC1_VOL
        140, // OSC1_SEMI
        0, // OSC1_XENV
        0, // OSC2_WAVEFORM
        0, // OSC2_VOL
        140, // OSC2_SEMI
        0, // OSC2_DETUNE
        0, // OSC2_XENV
        60, // NOISE_VOL
        4, // ENV_ATTACK
        10, // ENV_SUSTAIN
        34, // ENV_RELEASE
        0, // LFO_WAVEFORM
        187, // LFO_AMT
        5, // LFO_FREQ
        0, // LFO_FX_FREQ
        1, // FX_FILTER
        239, // FX_FREQ
        135, // FX_RESONANCE
        0, // FX_DIST
        32, // FX_DRIVE
        108, // FX_PAN_AMT
        5, // FX_PAN_FREQ
        16, // FX_DELAY_AMT
        4 // FX_DELAY_TIME
        ],
        // Patterns
        p: [,,,,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        // Columns
        c: [
          {n: [,,,,146,,,,,,,,146,,,,,,,,146,,,,,,,,146],
           f: []}
        ]
      }
    ],
    rowLen: 4410,   // In sample lengths
    patternLen: 32,  // Rows per pattern
    endPattern: 23  // End pattern
  }
};